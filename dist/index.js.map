{"version":3,"sources":["../src/ai.ts","../src/ship.ts","../src/gameboard.ts","../src/player.ts","../src/game.ts","../src/control.ts","../src/index.ts"],"sourcesContent":["import { Player } from './player';\n\nexport function aiTurn(aiPlayer: Player, targetPlayer: Player) {\n    if (aiPlayer.placingShips) {\n        return\n    }\n    else if (!aiPlayer.placingShips) {\n        const legalMoves = targetPlayer.board.getVacantTiles()\n        const coords = Math.floor(Math.random() * legalMoves.length) + 1;\n        const target = legalMoves[coords]\n        aiPlayer.placeAttack(targetPlayer, target.x, target.y)\n    }\n}","import { v4 as uuid } from 'uuid';\n\nexport interface shipProps {\n    type: string,\n    size: number,\n}\n\nexport class Ship {\n    type: string = 'small'\n    size: number\n    hits: number = 0\n    key\n\n    constructor(type: string, size: number) {\n        this.size = size;\n        this.type = type;\n        this.key = uuid()\n    }\n\n    public isSunk = () => { return this.hits >= this.size ? true : false };\n\n    public takeHit() {\n        this.hits++\n    }\n}","import { Ship } from \"./ship\"\n\nexport class Tile {\n\n    constructor(\n        public x: number,\n        public y: number,\n        public occupied: boolean = false,\n        public hit: boolean = false,\n        public shipKey?: string) { }\n}\n\nexport class GameBoard {\n    gameBoard: Tile[] = []\n    activeShips: Ship[] = []\n\n    constructor(\n        size: number\n    ) {\n        for (let x = 0; x < size; x++) {\n            for (let y = 0; y < size; y++) {\n                this.gameBoard.push(new Tile(x, y))\n            }\n        }\n    }\n\n    placementGrid(startTile: Tile, shipSize: number) {\n        const tilesToCheck = []\n        let currentTile: Tile = startTile\n        if (tilesToCheck.length === 0) {\n            tilesToCheck.push(currentTile)\n        }\n        while (shipSize > tilesToCheck.length) {\n            let newTile = this.gameBoard.find((newTile) => newTile.x === currentTile.x && newTile.y === currentTile.y + 1);\n            if (newTile) {\n                currentTile = newTile\n                tilesToCheck.push(currentTile)\n            } else return []\n        }\n        return tilesToCheck;\n    }\n\n    public placeShip(type: string, size: number, startTile: Tile) {\n        const placementArea = this.placementGrid(startTile, size)\n        if (placementArea.length === 0) { return false }\n        else if (placementArea.some((tile) => tile.occupied)) { return false }\n        else {\n            const shipToPlace = new Ship(type, size)\n            placementArea.forEach((tile) => {\n                tile.occupied = true\n                tile.shipKey = shipToPlace.key\n            })\n            this.activeShips.push(shipToPlace)\n        }\n        return true;\n    }\n\n    public receiveAttack(attackedTile: Tile) {\n        if (attackedTile.hit) { return false }\n        else if (attackedTile.occupied) {\n            attackedTile.hit = true\n            if (attackedTile.shipKey) {\n                const attackedShip = this.findShipFromKey(attackedTile.shipKey)\n                if (attackedShip) attackedShip.takeHit()\n            }\n        }\n        else attackedTile.hit = true\n        return true\n    }\n\n    public findTile(x: number, y: number) {\n        return this.gameBoard.find((tile) => tile.x == x && tile.y == y)\n    }\n\n    findShipFromKey(keyToFind: string) {\n        const foundShip = this.activeShips.find((ship) => ship.key === keyToFind)\n        return foundShip\n    }\n\n    public checkIfAllSunk() {\n        // const occupiedTiles = this.gameBoard.filter((tile) => tile.occupied)\n        return this.activeShips.every((ship) => ship.isSunk())\n    }\n\n    public getVacantTiles() {\n        return this.gameBoard.filter((tile) => !tile.hit);\n    }\n\n}","import { GameBoard } from \"./gameboard\";\nimport { shipProps } from \"./ship\";\n\nexport class Player {\n\n    constructor(\n        public name: string,\n        public human: boolean = true,\n        public takingTurn = true,\n        public ships: shipProps[] = [{ type: 'tiny', size: 1 }, { type: 'small', size: 2 }],\n        public board = new GameBoard(9),\n        public placingShips = true,\n    ) { }\n\n    public placeAttack(enemyPlayer: Player, x: number, y: number) {\n        const target = enemyPlayer.board.findTile(x, y)\n        if (target && !target.hit) {\n            enemyPlayer.board.receiveAttack(target);\n            this.takingTurn = false\n            enemyPlayer.setTurn()\n            return true\n        }\n        else {\n            return false\n        }\n    }\n\n    public setTurn() {\n        this.takingTurn = true\n    }\n\n    public placeShip(x: number, y: number) {\n        if (this.placingShips) {\n            if (this.ships.length === 0) {\n                this.placingShips = false\n                return false\n            }\n            const shipToPlace = this.ships.pop()\n            const target = this.board.findTile(x, y)\n            if (target && shipToPlace) {\n                this.board.placeShip(shipToPlace.type, shipToPlace.size, target)\n                return true\n            }\n        }\n        else return false\n    }\n}","import { aiTurn } from \"./ai\";\nimport { Player } from \"./player\";\nexport let P1: Player = new Player(\"P1\")\nexport let P2: Player = new Player(\"P2\", false, false)\nexport let winner = \"TBC\"\nexport let gameInPlay = true\n\nexport function setupGame() {\n    P1 = new Player(\"P1\")\n    P2 = new Player(\"P2\", false, false)\n    gameInPlay = true\n\n    // temporary ship placement and setup\n    P1.placeShip(1, 1)\n    P1.placeShip(2, 2)\n    P1.placingShips = false\n    P2.placeShip(1, 1)\n    P2.placeShip(2, 2)\n    P2.placingShips = false\n}\n\nconst getCurrentPlayer = () => {\n    if (P1.takingTurn && !P2.takingTurn) { return P1 }\n    if (P2.takingTurn && !P1.takingTurn) { return P2 }\n}\n\nconst getEnemyPlayer = () => {\n    if (P1.takingTurn && !P2.takingTurn) { return P2 }\n    if (P2.takingTurn && !P1.takingTurn) { return P1 }\n}\n\nexport function handleClick(boardName: string, x: number, y: number) {\n    const currentPlayer: Player = getCurrentPlayer() as Player\n    const enemyPlayer: Player = getEnemyPlayer() as Player\n    if (boardName === currentPlayer.name) {\n        if (!currentPlayer.placingShips) { return false }\n        else {\n            currentPlayer.placeShip(x, y)\n            return true\n        }\n    }\n    if (boardName === enemyPlayer.name && !currentPlayer.placingShips) {\n        currentPlayer.placeAttack(enemyPlayer, x, y)\n        let isWinner = checkWinner()\n        if (gameInPlay && !enemyPlayer.human) {\n            aiTurn(enemyPlayer, currentPlayer)\n        }\n        return true\n    }\n}\n\nfunction checkWinner() {\n    if (!P1.board.checkIfAllSunk() && !P2.board.checkIfAllSunk()) {\n        gameInPlay = true\n        return false\n    }\n    else if (P1.board.checkIfAllSunk() === true) {\n        winner = P2.name\n        gameInPlay = false\n        return winner\n    }\n    else if (P2.board.checkIfAllSunk() === true) {\n        winner = P1.name\n        gameInPlay = false\n        return winner\n    }\n    else {\n        gameInPlay = true\n        return false\n    }\n}\n\nexport function getP1Board() {\n    return P1.board.gameBoard\n}\n\nexport function getP2Board() {\n    return P2.board.gameBoard\n}","import * as game from \"./game\";\nimport { Tile } from \"./gameboard\";\n\n\nconst P1Frame = document.getElementById(\"P1Frame\") as HTMLDivElement\nconst P2Frame = document.getElementById(\"P2Frame\") as HTMLDivElement\n\nfunction createTile(owner: string, tile: Tile) {\n    const newTile = document.createElement('div')\n    newTile.id = `${owner}-${tile.x}-${tile.y}`\n    if (owner === \"P1\" && tile.occupied && !tile.hit) {\n        newTile.className = \"tile myship\"\n    }\n    else if (tile.hit && !tile.occupied) {\n        newTile.className = \"tile miss\"\n        newTile.innerText = \"x\"\n    }\n    else if (tile.hit && tile.occupied) {\n        newTile.className = \"tile hit\"\n    }\n    else {\n        newTile.className = \"tile\"\n    }\n    newTile.addEventListener('click', () => {\n        if (game.gameInPlay) {\n            game.handleClick(owner, tile.x, tile.y)\n            refreshBoards()\n        }\n    })\n    return newTile\n}\n\nfunction clickRef(idString: string) {\n    const params = idString.split('-')\n    return params\n}\n\nfunction refreshTile(tile: Tile) {\n\n}\n\nexport function refreshBoards() {\n    const P1Board = game.getP1Board()\n    const P2Board = game.getP2Board()\n\n    // create DOM elements for P1 board\n    P1Frame.innerHTML = ''\n    P1Board.forEach(tile => {\n        const newTile = createTile(\"P1\", tile)\n        P1Frame.appendChild(newTile)\n    })\n\n    // create DOM elements for P2 board\n    P2Frame.innerHTML = ''\n    P2Board.forEach(tile => {\n        const newTile = createTile(\"P2\", tile)\n        P2Frame.appendChild(newTile)\n    })\n}","import * as DOM from \"./control\"\nimport { setupGame } from \"./game\"\n\nsetupGame()\nDOM.refreshBoards()"],"mappings":"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","names":["uuid","newTile"]}